// package.json
{
  "name": "user-timer-app",
  "version": "1.0.0",
  "description": "Real-time user timer management with WebSocket sync",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "socket.io": "^4.7.2",
    "node-cron": "^3.0.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

// server.js
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cron = require('node-cron');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// In-memory storage (в продакшене используйте базу данных)
let users = [];
let timers = new Map();

// Utility functions
function formatTime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

function updateTimer(userId) {
  const user = users.find(u => u.id === userId);
  if (!user || !user.isRunning || user.isExpired) return;

  user.timeLeft--;
  
  if (user.timeLeft <= 0) {
    user.timeLeft = 0;
    user.isRunning = false;
    user.isExpired = true;
    
    // Clear timer
    if (timers.has(userId)) {
      clearInterval(timers.get(userId));
      timers.delete(userId);
    }
  }
  
  // Broadcast update to all clients
  io.emit('userUpdated', user);
}

// Socket.io connection handling
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);
  
  // Send current state to new client
  socket.emit('usersState', users);
  
  // Add user
  socket.on('addUser', (userData) => {
    const existingUser = users.find(u => u.name.toLowerCase() === userData.name.toLowerCase());
    if (existingUser) {
      socket.emit('error', 'User already exists');
      return;
    }
    
    const user = {
      id: Date.now(),
      name: userData.name,
      timeLeft: 90 * 60, // 1:30:00 in seconds
      isRunning: false,
      isExpired: false,
      createdAt: new Date()
    };
    
    users.push(user);
    io.emit('userAdded', user);
  });
  
  // Delete user
  socket.on('deleteUser', (userId) => {
    // Clear timer if exists
    if (timers.has(userId)) {
      clearInterval(timers.get(userId));
      timers.delete(userId);
    }
    
    users = users.filter(user => user.id !== userId);
    io.emit('userDeleted', userId);
  });
  
  // Toggle timer
  socket.on('toggleTimer', (userId) => {
    const user = users.find(u => u.id === userId);
    if (!user || user.isExpired) return;
    
    if (user.isRunning) {
      // Pause timer
      user.isRunning = false;
      if (timers.has(userId)) {
        clearInterval(timers.get(userId));
        timers.delete(userId);
      }
    } else {
      // Start timer
      user.isRunning = true;
      const intervalId = setInterval(() => updateTimer(userId), 1000);
      timers.set(userId, intervalId);
    }
    
    io.emit('userUpdated', user);
  });
  
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// Cron job to save state periodically (optional)
cron.schedule('*/5 * * * *', () => {
  // Here you can save users state to database
  console.log('Saving state... Users count:', users.length);
});

// Start server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('Shutting down gracefully...');
  // Clear all timers
  timers.forEach((intervalId) => clearInterval(intervalId));
  timers.clear();
  server.close(() => {
    process.exit(0);
  });
});

// public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management with Real-time Timers</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 30px;
            width: 100%;
            max-width: 700px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 24px;
            font-weight: 600;
        }

        .connection-status {
            text-align: center;
            margin-bottom: 20px;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
        }

        .connected {
            background: #c6f6d5;
            color: #22543d;
        }

        .disconnected {
            background: #fed7d7;
            color: #742a2a;
        }

        .input-section {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }

        .input-field {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.2s ease;
        }

        .input-field:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-1px);
        }

        .btn-primary:disabled {
            background: #a0aec0;
            cursor: not-allowed;
            transform: none;
        }

        .btn-success {
            background: #48bb78;
            color: white;
            padding: 8px 16px;
            font-size: 14px;
        }

        .btn-success:hover {
            background: #38a169;
        }

        .btn-warning {
            background: #ed8936;
            color: white;
            padding: 8px 16px;
            font-size: 14px;
        }

        .btn-warning:hover {
            background: #dd6b20;
        }

        .btn-danger {
            background: #e53e3e;
            color: white;
            padding: 8px 16px;
            font-size: 14px;
        }

        .btn-danger:hover {
            background: #c53030;
        }

        .btn-disabled {
            background: #a0aec0;
            color: white;
            cursor: not-allowed;
            padding: 8px 16px;
            font-size: 14px;
        }

        .user-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .user-item {
            padding: 16px;
            background: #f7fafc;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            animation: slideIn 0.3s ease;
        }

        .user-item.expired {
            border-left-color: #e53e3e;
            background: #fed7d7;
            animation: slideIn 0.3s ease, pulse 1s infinite;
        }

        .user-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
        }

        .user-name {
            font-weight: 500;
            color: #2d3748;
            font-size: 16px;
        }

        .timer-section {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 15px;
        }

        .timer-display {
            font-family: 'Courier New', monospace;
            font-size: 18px;
            font-weight: bold;
            color: #4a5568;
            min-width: 80px;
        }

        .timer-display.running {
            color: #667eea;
        }

        .timer-display.expired {
            color: #e53e3e;
        }

        .timer-controls {
            display: flex;
            gap: 10px;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #718096;
            font-style: italic;
        }

        .user-count {
            text-align: center;
            margin-bottom: 20px;
            color: #667eea;
            font-weight: 500;
        }

        .error-message {
            background: #fed7d7;
            color: #742a2a;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 20px;
            text-align: center;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        @media (max-width: 600px) {
            .container {
                padding: 20px;
            }
            
            .input-section {
                flex-direction: column;
            }
            
            .user-header {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }
            
            .timer-section {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }
            
            .timer-controls {
                flex-direction: column;
                width: 100%;
            }
            
            .timer-controls .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>⏱️ User Timer Management</h1>
        
        <div id="connectionStatus" class="connection-status disconnected">
            🔴 Disconnected
        </div>
        
        <div id="errorMessage" class="error-message" style="display: none;"></div>
        
        <div class="input-section">
            <input 
                type="text" 
                id="nameInput" 
                class="input-field" 
                placeholder="Enter user name..."
                maxlength="50"
            >
            <button id="addBtn" class="btn btn-primary" disabled>Add User</button>
        </div>

        <div id="userCount" class="user-count" style="display: none;">
            Total users: <span id="count">0</span>
        </div>

        <div id="userList" class="user-list">
            <div class="empty-state">
                Connecting to server... 🔄
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        class UserManager {
            constructor() {
                this.users = [];
                this.socket = io();
                this.connected = false;
                
                this.nameInput = document.getElementById('nameInput');
                this.addBtn = document.getElementById('addBtn');
                this.userList = document.getElementById('userList');
                this.userCount = document.getElementById('userCount');
                this.countSpan = document.getElementById('count');
                this.connectionStatus = document.getElementById('connectionStatus');
                this.errorMessage = document.getElementById('errorMessage');
                
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.setupSocketListeners();
            }

            setupEventListeners() {
                this.addBtn.addEventListener('click', () => this.addUser());
                this.nameInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addUser();
                });
                this.nameInput.addEventListener('input', () => this.validateInput());
            }

            setupSocketListeners() {
                this.socket.on('connect', () => {
                    console.log('Connected to server');
                    this.connected = true;
                    this.updateConnectionStatus();
                });

                this.socket.on('disconnect', () => {
                    console.log('Disconnected from server');
                    this.connected = false;
                    this.updateConnectionStatus();
                });

                this.socket.on('usersState', (users) => {
                    this.users = users;
                    this.renderUsers();
                });

                this.socket.on('userAdded', (user) => {
                    this.users.push(user);
                    this.renderUsers();
                });

                this.socket.on('userDeleted', (userId) => {
                    this.users = this.users.filter(user => user.id !== userId);
                    this.renderUsers();
                });

                this.socket.on('userUpdated', (updatedUser) => {
                    const index = this.users.findIndex(user => user.id === updatedUser.id);
                    if (index !== -1) {
                        this.users[index] = updatedUser;
                        this.updateUserDisplay(updatedUser.id);
                    }
                });

                this.socket.on('error', (message) => {
                    this.showError(message);
                });
            }

            updateConnectionStatus() {
                if (this.connected) {
                    this.connectionStatus.textContent = '🟢 Connected';
                    this.connectionStatus.className = 'connection-status connected';
                    this.addBtn.disabled = false;
                    this.validateInput();
                } else {
                    this.connectionStatus.textContent = '🔴 Disconnected';
                    this.connectionStatus.className = 'connection-status disconnected';
                    this.addBtn.disabled = true;
                }
            }

            validateInput() {
                if (!this.connected) {
                    this.addBtn.disabled = true;
                    return;
                }
                
                const name = this.nameInput.value.trim();
                const isValid = name.length > 0 && name.length <= 50;
                this.addBtn.disabled = !isValid;
            }

            addUser() {
                const name = this.nameInput.value.trim();
                
                if (!name) {
                    this.showError('Please enter a name');
                    return;
                }

                if (!this.connected) {
                    this.showError('Not connected to server');
                    return;
                }

                this.socket.emit('addUser', { name });
                this.nameInput.value = '';
                this.validateInput();
            }

            deleteUser(id) {
                if (!this.connected) {
                    this.showError('Not connected to server');
                    return;
                }
                
                this.socket.emit('deleteUser', id);
            }

            toggleTimer(id) {
                if (!this.connected) {
                    this.showError('Not connected to server');
                    return;
                }
                
                this.socket.emit('toggleTimer', id);
            }

            updateUserDisplay(id) {
                const userElement = document.querySelector(`[data-user-id="${id}"]`);
                if (!userElement) return;

                const user = this.users.find(u => u.id === id);
                if (!user) return;

                const timerDisplay = userElement.querySelector('.timer-display');
                const toggleBtn = userElement.querySelector('.toggle-btn');
                
                timerDisplay.textContent = this.formatTime(user.timeLeft);
                
                if (user.isExpired) {
                    userElement.classList.add('expired');
                    timerDisplay.classList.add('expired');
                    timerDisplay.classList.remove('running');
                    toggleBtn.textContent = 'Expired';
                    toggleBtn.className = 'btn btn-disabled toggle-btn';
                    toggleBtn.disabled = true;
                } else {
                    userElement.classList.remove('expired');
                    timerDisplay.classList.remove('expired');
                    toggleBtn.disabled = false;
                    
                    if (user.isRunning) {
                        timerDisplay.classList.add('running');
                        toggleBtn.textContent = 'Pause';
                        toggleBtn.className = 'btn btn-warning toggle-btn';
                    } else {
                        timerDisplay.classList.remove('running');
                        toggleBtn.textContent = 'Start';
                        toggleBtn.className = 'btn btn-success toggle-btn';
                    }
                }
            }

            formatTime(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }

            renderUsers() {
                this.userList.innerHTML = '';
                
                if (this.users.length === 0) {
                    this.userList.innerHTML = '<div class="empty-state">No users added yet. Add your first user above! 🚀</div>';
                    this.userCount.style.display = 'none';
                    return;
                }

                this.userCount.style.display = 'block';
                this.countSpan.textContent = this.users.length;

                this.users.forEach(user => {
                    const userElement = document.createElement('div');
                    userElement.className = `user-item ${user.isExpired ? 'expired' : ''}`;
                    userElement.setAttribute('data-user-id', user.id);
                    
                    userElement.innerHTML = `
                        <div class="user-header">
                            <span class="user-name">${this.escapeHtml(user.name)}</span>
                            <button class="btn btn-danger" onclick="userManager.deleteUser(${user.id})">
                                Delete
                            </button>
                        </div>
                        <div class="timer-section">
                            <span class="timer-display ${user.isRunning ? 'running' : ''} ${user.isExpired ? 'expired' : ''}">${this.formatTime(user.timeLeft)}</span>
                            <div class="timer-controls">
                                <button 
                                    class="btn ${user.isExpired ? 'btn-disabled' : user.isRunning ? 'btn-warning' : 'btn-success'} toggle-btn"
                                    onclick="userManager.toggleTimer(${user.id})"
                                    ${user.isExpired ? 'disabled' : ''}
                                >
                                    ${user.isExpired ? 'Expired' : user.isRunning ? 'Pause' : 'Start'}
                                </button>
                            </div>
                        </div>
                    `;
                    
                    this.userList.appendChild(userElement);
                });
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            showError(message) {
                this.errorMessage.textContent = message;
                this.errorMessage.style.display = 'block';
                
                setTimeout(() => {
                    this.errorMessage.style.display = 'none';
                }, 3000);
            }
        }

        const userManager = new UserManager();
    </script>
</body>
</html>